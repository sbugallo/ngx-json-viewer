{"version":3,"file":"ngx-json-viewer.js","sources":["ng://ngx-json-viewer/src/ngx-json-viewer/ngx-json-viewer.component.ts","ng://ngx-json-viewer/src/ngx-json-viewer.module.ts","ng://ngx-json-viewer/ngx-json-viewer.ts"],"sourcesContent":["import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport isEqual from 'deep-equal';\n\nexport interface Segment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\n\n@Component({\n  selector: 'ngx-json-viewer',\n  templateUrl: './ngx-json-viewer.component.html',\n  styleUrls: ['./ngx-json-viewer.component.scss']\n})\nexport class NgxJsonViewerComponent implements OnChanges {\n\n  @Input() path: string[] = [];\n  @Input() json: any;\n  @Input() expanded = true;\n\n  segments: Segment[] = [];\n  private readonly expandedChildren = new Set<string>();\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Re-parse only if JSON changed & values are not similar (use deep object/array comparison)\n    if (!changes.json || isEqual(changes.json.previousValue, changes.json.currentValue)) {\n      return;\n    }\n    const newJson = changes.json.currentValue;\n\n    if (typeof newJson === 'object') {\n      this.segments = Object.keys(newJson).map(key => this.parseKeyValue(key, newJson[key]));\n    } else {\n      this.segments = [this.parseKeyValue(`(${typeof newJson})`, newJson)];\n    }\n\n    if (!changes.expanded) {\n      // Clean up expanded children keys that no longer exist.\n      for (const oldChildSegmentdKey in this.expandedChildren.values()) {\n        if (!this.segments.some(s => s.key === oldChildSegmentdKey)) {\n          this.expandedChildren.delete(oldChildSegmentdKey);\n        }\n      }\n\n    } else {\n      // Clear the state of individual elements.\n      this.expandedChildren.clear();\n    }\n  }\n\n  isExpandable(segment: Segment) {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n\n  isChildExpanded(segment: Segment | string) {\n    return this.expandedChildren.has(typeof segment === 'string' ? segment : segment.key);\n  }\n\n  toggle(segment: Segment) {\n    // Check if the given segment is expandable.\n    // This check is required to avoid storing useless keys in the expanded children set.\n    if (this.isExpandable(segment)) {\n      // Add or remove the segment key to the set of opened segments\n      if (this.isChildExpanded(segment)) {\n        this.expandedChildren.delete(segment.key);\n      } else {\n        this.expandedChildren.add(segment.key);\n      }\n    }\n  }\n\n  private parseKeyValue(key: any, value: any): Segment {\n    const segment: Segment = {\n      key,\n      value,\n      type: undefined,\n      description: '' + value,\n      // Retrieve the current expand state.\n      expanded: this.expanded || this.isChildExpanded(key),\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n})\nexport class NgxJsonViewerModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate"],"mappings":"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"}